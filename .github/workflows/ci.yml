name: CI

on:
  push:
    branches-ignore:
      - gh-pages
  pull_request:
    types:
      - opened
      - synchronize
    branches-ignore:
      - gh-pages
  release:
    types:
      - published

env:
  CARGO_TERM_COLOR: always
  MSRV: '1.61'

jobs:
  msrv_check:
    name: MSRV check

    runs-on: ubuntu-20.04

    # Only run if this is not a pull request, or for pull requests on forks
    if: github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != 'OptiVorbis/OptiVorbis'

    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v3

      - name: 🧰 Install MSRV toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.MSRV }}
          profile: minimal
          default: true

      - name: 💨 Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: ⚙️ Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p optivorbis -p optivorbis_cli -p vorbis_bitpack

  ci:
    strategy:
      matrix:
        runner:
          - ubuntu-20.04
          - windows-2022
          - macos-11
        id: [0] # Dummy value to control whether to add or replace matrix combinations below
        include:
          - runner: ubuntu-20.04
            id: 0
            target: x86_64-unknown-linux-musl
            cli-executable: optivorbis
          - runner: ubuntu-20.04
            id: 1 # Add new combination
            target: aarch64-unknown-linux-musl
            cli-executable: optivorbis
          - runner: windows-2022
            id: 0
            target: x86_64-pc-windows-gnu
            cli-executable: optivorbis.exe
          - runner: macos-11
            id: 0
            target: x86_64-apple-darwin
            cli-executable: optivorbis

    name: CI (${{ matrix.target }})
    runs-on: ${{ matrix.runner }}

    # Only run if this is not a pull request, or for pull requests on forks
    if: github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != 'OptiVorbis/OptiVorbis'

    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Keep the commit history for proper version information

      - name: 🧰 Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
          profile: minimal
          default: true
          components: rust-src, rustfmt, clippy

      - name: 🧰 Install ARM64 cross-compilation toolchain
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: sudo apt install -yq gcc-aarch64-linux-gnu qemu-user

      - name: 💨 Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: '🔍 Static analysis: run Clippy'
        uses: actions-rs/clippy-check@v1
        if: matrix.runner == 'ubuntu-20.04' && matrix.id == 0
        with:
          args: --no-deps --all-targets --all-features -- -D warnings
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: '🔍 Static analysis: run rustfmt'
        uses: actions-rs/cargo@v1
        if: matrix.runner == 'ubuntu-20.04' && matrix.id == 0
        with:
          command: fmt
          args: --check --all

      - name: '🔍 Static analysis: run cargo deny'
        if: matrix.runner == 'ubuntu-20.04' && matrix.id == 0
        uses: EmbarkStudios/cargo-deny-action@v1

      - name: ✔️ Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --target ${{ matrix.target }}
            -p optivorbis -p optivorbis_cli -p vorbis_bitpack

      - name: 📚 Build documentation
        uses: actions-rs/cargo@v1
        if: matrix.runner == 'ubuntu-20.04' && matrix.id == 0
        with:
          command: doc

      - name: 🔨 Build CLI executable
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }} --release
            -Z build-std=panic_abort,core,std,alloc,proc_macro
            -Z build-std-features=panic_immediate_abort

      - name: 📤 Upload CLI executable artifact
        uses: actions/upload-artifact@v3
        with:
          name: OptiVorbis CLI (${{ matrix.target }})
          path: target/${{ matrix.target }}/release/${{ matrix.cli-executable }}

  web_demo:
    name: Web demo

    needs: ci
    runs-on: ubuntu-20.04

    # Only run if this is not a pull request, or for pull requests on forks
    if: github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != 'OptiVorbis/OptiVorbis'

    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Keep the commit history for proper version information

      - name: 🧰 Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          default: true
          components: rust-src

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: 🧰 Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: 💨 Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: 🔨 Build web demo
        run: |
          cd web
          npm install

      - name: '🔍 Static analysis: ESLint'
        run: |
          cd web
          npm run lint

      - name: 📤 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/master' # Only run for pushes to the master branch
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/web
