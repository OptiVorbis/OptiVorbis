[package]
name = "optivorbis"
description = "A lossless, format-preserving, two-pass Vorbis optimization and repair library"
authors.workspace = true
license = "AGPL-3.0-or-later OR BSD-3-Clause"
version.workspace = true
homepage.workspace = true
repository.workspace = true
documentation = "https://docs.rs/optivorbis"
readme = "../../README.md"
keywords.workspace = true
categories.workspace = true
edition.workspace = true
rust-version.workspace = true
# Run cargo diet to maintain this include list
include = ["src/**/*", "LICENSE.BSD-3-Clause", "LICENSE", "build.rs"]

[dependencies]
ogg = "0.9.2"
vorbis_bitpack.workspace = true

indexmap = "2.8.0"
bumpalo = "3.17.0"
tinyvec = { version = "1.9.0", default-features = false, features = [
  "alloc",
  "rustc_1_57",
] }

getrandom = "0.3.1"
rand_xoshiro = "0.7.0"

thiserror = "2.0.12"
ouroboros = "0.18.5"
slice-group-by = "0.3.1"

log.workspace = true

wasm-bindgen = { version = "0.2.100", default-features = false, optional = true }
console_log = { version = "1.0.0", features = ["color"], optional = true }
console_error_panic_hook = { version = "0.1.7", optional = true }

[lib]
crate-type = ["lib", "cdylib"]

[dev-dependencies]
pretty_env_logger = "0.5.0"
oggvorbismeta = "0.2.0"

[features]
default = ["source-date-epoch"]

source-date-epoch = []

wasm-bindings = ["dep:wasm-bindgen"]
wasm-web-bindings = [
  "wasm-bindings",
  "dep:console_log",
  "dep:console_error_panic_hook",
  "getrandom/wasm_js",
]

[package.metadata.docs.rs]
rustdoc-args = ["--cfg", "docsrs"]

# We set custom wasm-opt flags for two reasons:
# - First, since Rust 1.82, the wasm-opt version used by wasm_pack v0.13.1, v117,
#   is unable to recognize the new LLVM default of using bulk memory WASM extensions,
#   so we need to explicitly enable support for such extensions, and disable its
#   wasm-validator pass, as we can't tell it to allow such feature, and rustc's output
#   can be assumed to always valid WASM. See:
#   https://github.com/rustwasm/wasm-pack/issues/1441#issuecomment-2474250133
# - Second, we want to optimize for size as much as possible, so we use the -Oz flag,
#   which is more aggressive than the default -O flag, equivalent to -Os.
[package.metadata.wasm-pack.profile]
release = { wasm-opt = ["-Oz", "--enable-bulk-memory", "--no-validation"] }
profiling = { wasm-opt = ["-Oz", "--enable-bulk-memory", "--no-validation"] }
