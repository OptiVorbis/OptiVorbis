name: CI

on:
  push:
    branches-ignore:
      - gh-pages
  pull_request:
    types:
      - opened
      - synchronize
    branches-ignore:
      - gh-pages
  release:
    types:
      - published

env:
  MSRV: '1.62'

jobs:
  msrv_check:
    name: MSRV check

    runs-on: ubuntu-20.04

    # Only run if this is not a pull request, or for pull requests on forks
    if: github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != 'OptiVorbis/OptiVorbis'

    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v3

      - name: 🧰 Install MSRV toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.MSRV }}

      - name: 💨 Cache Rust artifacts
        uses: Swatinem/rust-cache@v2

      - name: ⚙️ Run tests
        run: cargo test -p optivorbis -p optivorbis_cli -p vorbis_bitpack

  ci:
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-musl
            runner: ubuntu-20.04
            cli-executable: optivorbis
          - target: aarch64-unknown-linux-musl
            runner: ubuntu-20.04
            cli-executable: optivorbis
          - target: x86_64-pc-windows-gnu
            runner: windows-2022
            cli-executable: optivorbis.exe
          - target: x86_64-apple-darwin
            runner: macos-11
            cli-executable: optivorbis

    name: CI (${{ matrix.target }})
    runs-on: ${{ matrix.runner }}

    # Only run if this is not a pull request, or for pull requests on forks
    if: github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != 'OptiVorbis/OptiVorbis'

    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Keep the commit history for proper version information

      - name: 🧰 Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          target: ${{ matrix.target }}
          components: rust-src, rustfmt, clippy

      - name: 🧰 Install ARM64 cross-compilation toolchain
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: sudo apt update && sudo apt install -yq gcc-aarch64-linux-gnu qemu-user

      - name: 💨 Cache Rust artifacts
        uses: Swatinem/rust-cache@v2

      - name: '🔍 Static analysis: run Clippy'
        uses: actions-rs/clippy-check@v1
        if: matrix.target == 'x86_64-unknown-linux-musl'
        with:
          args: --no-deps --all-targets --all-features -- -D warnings
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: '🔍 Static analysis: run rustfmt'
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: cargo fmt --check --all

      - name: '🔍 Static analysis: run cargo deny'
        if: matrix.target == 'x86_64-unknown-linux-musl'
        uses: EmbarkStudios/cargo-deny-action@v1

      - name: ✔️ Run tests
        run: cargo test --release --target ${{ matrix.target }} -Zdoctest-xcompile
          -p optivorbis -p optivorbis_cli -p vorbis_bitpack

      - name: 📚 Build documentation
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: cargo doc

      - name: 🔨 Build CLI executable
        run: cargo build --target ${{ matrix.target }} --release
            -Z build-std=panic_abort,core,std,alloc,proc_macro
            -Z build-std-features=panic_immediate_abort

      - name: 📤 Upload CLI executable artifact
        uses: actions/upload-artifact@v3
        with:
          name: OptiVorbis CLI (${{ matrix.target }})
          path: target/${{ matrix.target }}/release/${{ matrix.cli-executable }}

  web_demo:
    name: Web demo

    needs: ci
    runs-on: ubuntu-20.04

    # Only run if this is not a pull request, or for pull requests on forks
    if: github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != 'OptiVorbis/OptiVorbis'

    defaults:
      run:
        working-directory: web

    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Keep the commit history for proper version information

      - name: 🧰 Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: 🧰 Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: 💨 Cache Rust artifacts
        uses: Swatinem/rust-cache@v2

      - name: 🔨 Build web demo
        run: npm ci

      - name: '🔍 Static analysis: ESLint'
        run: npm run lint

      - name: 📤 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/master' # Only run for pushes to the master branch
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/web
